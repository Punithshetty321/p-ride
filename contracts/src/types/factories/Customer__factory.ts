/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Customer, CustomerInterface } from "../Customer";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "_customer",
        type: "tuple",
      },
    ],
    name: "createCustomer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
    ],
    name: "getCustomer",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_walletAddr",
        type: "address",
      },
      {
        components: [
          {
            internalType: "string",
            name: "fullname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
          {
            internalType: "string",
            name: "dob",
            type: "string",
          },
          {
            internalType: "string",
            name: "govtID",
            type: "string",
          },
          {
            internalType: "string",
            name: "picture",
            type: "string",
          },
          {
            internalType: "address",
            name: "wallet",
            type: "address",
          },
        ],
        internalType: "struct Customer.USERS",
        name: "_customer",
        type: "tuple",
      },
    ],
    name: "updateCustomer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61161a8061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063715018a6146100675780638da5cb5b1461007157806392818e7c1461008f578063cb949e51146100bf578063e866f054146100ef578063f2fde38b1461011f575b600080fd5b61006f61013b565b005b6100796101c3565b60405161008691906113ad565b60405180910390f35b6100a960048036038101906100a491906111b7565b6101ec565b6040516100b691906113ad565b60405180910390f35b6100d960048036038101906100d4919061118e565b610526565b6040516100e69190611408565b60405180910390f35b610109600480360381019061010491906111b7565b610a0d565b60405161011691906113ad565b60405180910390f35b6101396004803603810190610134919061118e565b610d47565b005b610143610e3f565b73ffffffffffffffffffffffffffffffffffffffff166101616101c3565b73ffffffffffffffffffffffffffffffffffffffff16146101b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ae906113e8565b60405180910390fd5b6101c16000610e47565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006101f6610e3f565b73ffffffffffffffffffffffffffffffffffffffff166102146101c3565b73ffffffffffffffffffffffffffffffffffffffff161461026a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610261906113e8565b60405180910390fd5b6102967f072fe0e2baea0481709a41322ca61a4b6785531353d8792b8a535f46ef392b9960001b610f0b565b6102c27fa36e5b8c72cc21db7595d68aeba1b3736e1292d3f7da37cfb8cc50b86862ad8560001b610f0b565b6102ee7f69f7fc2c13c3cb4a899602f19335b5e1d59f4d32848b2e779e3c9def078439f560001b610f0b565b6102f6610f0e565b6103227f5956dc4b9cdd996e116dd940a97d60ec00d8f609984bee59fc9a03e6ba37254960001b610f0b565b61034e7f2be452bc7cc1774e3551ec97497a8385bcca79d3e64b94bcd486064814284f6b60001b610f0b565b82905061037d7fb87338df6f53238a7a8ef5dc2960de2ea65a3f1c6179979f2f980c9e4d5540eb60001b610f0b565b6103a97f805a67f4d2a73c9284afcdf30824ac608d094f9ec9ce1dbcd4b358167fe3ad7d60001b610f0b565b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610405929190610f5a565b506020820151816001019080519060200190610422929190610f5a565b50604082015181600201908051906020019061043f929190610f5a565b50606082015181600301908051906020019061045c929190610f5a565b506080820151816004019080519060200190610479929190610f5a565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050506104f07f74a7fbf6315985c8f66a69b559a089ac689eb42fe4931968ea1aecdb5b45d9ad60001b610f0b565b61051c7f0814dd50e26b55cd431baa4b50737c69a24fe38922a21cc5ca362658e2ee1ce460001b610f0b565b8391505092915050565b61052e610f0e565b610536610e3f565b73ffffffffffffffffffffffffffffffffffffffff166105546101c3565b73ffffffffffffffffffffffffffffffffffffffff16146105aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a1906113e8565b60405180910390fd5b6105d67f87307de8909b760927052e4469de677b51d0c89a7aa1f83f221f49ceb21bd6da60001b610f0b565b6106027f24465e04d2331c9257b4abbd825d7202c517ac9b5c46f4f75edc49d4d377f30e60001b610f0b565b61062e7f56d15a918c2f0b46bce6ccbcaecdca395c3f5e0ff3426815797d65e55d9abb7260001b610f0b565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060c001604052908160008201805461068a9061152c565b80601f01602080910402602001604051908101604052809291908181526020018280546106b69061152c565b80156107035780601f106106d857610100808354040283529160200191610703565b820191906000526020600020905b8154815290600101906020018083116106e657829003601f168201915b5050505050815260200160018201805461071c9061152c565b80601f01602080910402602001604051908101604052809291908181526020018280546107489061152c565b80156107955780601f1061076a57610100808354040283529160200191610795565b820191906000526020600020905b81548152906001019060200180831161077857829003601f168201915b505050505081526020016002820180546107ae9061152c565b80601f01602080910402602001604051908101604052809291908181526020018280546107da9061152c565b80156108275780601f106107fc57610100808354040283529160200191610827565b820191906000526020600020905b81548152906001019060200180831161080a57829003601f168201915b505050505081526020016003820180546108409061152c565b80601f016020809104026020016040519081016040528092919081815260200182805461086c9061152c565b80156108b95780601f1061088e576101008083540402835291602001916108b9565b820191906000526020600020905b81548152906001019060200180831161089c57829003601f168201915b505050505081526020016004820180546108d29061152c565b80601f01602080910402602001604051908101604052809291908181526020018280546108fe9061152c565b801561094b5780601f106109205761010080835404028352916020019161094b565b820191906000526020600020905b81548152906001019060200180831161092e57829003601f168201915b505050505081526020016005820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090506109d87ff8cbd80915ad371a4cdc086d3a20c33d3a63ebe84f2d4d7c53cb0c606cbd1e9060001b610f0b565b610a047f4afcd84f62a453557d7e4b4828e70b7197c2ef00d402341f1b463f6f97a8aa4d60001b610f0b565b80915050919050565b6000610a17610e3f565b73ffffffffffffffffffffffffffffffffffffffff16610a356101c3565b73ffffffffffffffffffffffffffffffffffffffff1614610a8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a82906113e8565b60405180910390fd5b610ab77fe8d1effc1538a71c98080210fa6dbbedf0c9ceda3fa05ab84967728eb631be5d60001b610f0b565b610ae37f6f51578e86b29afde6f189f9508cc83ef8ce685cb839bd56c8469af5cd6a694260001b610f0b565b610b0f7fec906b55d74ac5f04bf1346886b0d41b49300631d49138537cc0b4cd6604b04560001b610f0b565b610b17610f0e565b610b437f6ee7b27f3ab707304bdfca90926b043aab9df7fbbaeab33a61f9f1f0d296932f60001b610f0b565b610b6f7f277278819b66ff927a885d7f989f943a6cee6c3816ef0ac0b8a589346e254ec260001b610f0b565b829050610b9e7f02c7e2d7c6ba4e5f08b949a2f9137587ee01f55eb6841fd8301240d3c08c14f160001b610f0b565b610bca7fe85c716dd1f9b31511bdb80320bdd7a307295ac9929ec086048e2d27981948c360001b610f0b565b80600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610c26929190610f5a565b506020820151816001019080519060200190610c43929190610f5a565b506040820151816002019080519060200190610c60929190610f5a565b506060820151816003019080519060200190610c7d929190610f5a565b506080820151816004019080519060200190610c9a929190610f5a565b5060a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050610d117f8a2cffb87c89fef8a261bb31cf3cfe390958340e93c1b6229dece30f48ac730860001b610f0b565b610d3d7fec58af02b08db6b3e91078a4822484d9c74afc2a99c2bfbc522a96aefb0f8cf560001b610f0b565b8391505092915050565b610d4f610e3f565b73ffffffffffffffffffffffffffffffffffffffff16610d6d6101c3565b73ffffffffffffffffffffffffffffffffffffffff1614610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba906113e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2a906113c8565b60405180910390fd5b610e3c81610e47565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b6040518060c001604052806060815260200160608152602001606081526020016060815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054610f669061152c565b90600052602060002090601f016020900481019282610f885760008555610fcf565b82601f10610fa157805160ff1916838001178555610fcf565b82800160010185558215610fcf579182015b82811115610fce578251825591602001919060010190610fb3565b5b509050610fdc9190610fe0565b5090565b5b80821115610ff9576000816000905550600101610fe1565b5090565b600061101061100b8461145b565b61142a565b90508281526020810184848401111561102857600080fd5b6110338482856114ea565b509392505050565b60008135905061104a816115cd565b92915050565b600082601f83011261106157600080fd5b8135611071848260208601610ffd565b91505092915050565b600060c0828403121561108c57600080fd5b61109660c061142a565b9050600082013567ffffffffffffffff8111156110b257600080fd5b6110be84828501611050565b600083015250602082013567ffffffffffffffff8111156110de57600080fd5b6110ea84828501611050565b602083015250604082013567ffffffffffffffff81111561110a57600080fd5b61111684828501611050565b604083015250606082013567ffffffffffffffff81111561113657600080fd5b61114284828501611050565b606083015250608082013567ffffffffffffffff81111561116257600080fd5b61116e84828501611050565b60808301525060a06111828482850161103b565b60a08301525092915050565b6000602082840312156111a057600080fd5b60006111ae8482850161103b565b91505092915050565b600080604083850312156111ca57600080fd5b60006111d88582860161103b565b925050602083013567ffffffffffffffff8111156111f557600080fd5b6112018582860161107a565b9150509250929050565b611214816114b8565b82525050565b611223816114b8565b82525050565b60006112348261148b565b61123e8185611496565b935061124e8185602086016114f9565b611257816115bc565b840191505092915050565b600061126f6026836114a7565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112d56020836114a7565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600060c08301600083015184820360008601526113258282611229565b9150506020830151848203602086015261133f8282611229565b915050604083015184820360408601526113598282611229565b915050606083015184820360608601526113738282611229565b9150506080830151848203608086015261138d8282611229565b91505060a08301516113a260a086018261120b565b508091505092915050565b60006020820190506113c2600083018461121a565b92915050565b600060208201905081810360008301526113e181611262565b9050919050565b60006020820190508181036000830152611401816112c8565b9050919050565b600060208201905081810360008301526114228184611308565b905092915050565b6000604051905081810181811067ffffffffffffffff821117156114515761145061158d565b5b8060405250919050565b600067ffffffffffffffff8211156114765761147561158d565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006114c3826114ca565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b838110156115175780820151818401526020810190506114fc565b83811115611526576000848401525b50505050565b6000600282049050600182168061154457607f821691505b602082108114156115585761155761155e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6115d6816114b8565b81146115e157600080fd5b5056fea264697066735822122077a6f3c2daa31c65b22f15e44d66428c0dc8d57ca9a663c164611768bfc6b06c64736f6c63430008000033";

type CustomerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CustomerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Customer__factory extends ContractFactory {
  constructor(...args: CustomerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Customer> {
    return super.deploy(overrides || {}) as Promise<Customer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Customer {
    return super.attach(address) as Customer;
  }
  connect(signer: Signer): Customer__factory {
    return super.connect(signer) as Customer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CustomerInterface {
    return new utils.Interface(_abi) as CustomerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Customer {
    return new Contract(address, _abi, signerOrProvider) as Customer;
  }
}
